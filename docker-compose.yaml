version: '3.7'

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    image: docker.io/bitnami/kafka:3.7.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/logs
    depends_on:
        - zookeeper
    networks:
      - app-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - 8082:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      SERVER_SERVLET_CONTEXT_PATH: /kafka-ui
    depends_on:
      - kafka
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    hostname: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    command: "postgres -c wal_level=logical"
    networks:
      - app-network

  debezium:
    image: debezium/connect:2.4.0.Final
    ports:
      - "8083:8083"
    environment:
      REST_PORT: 8083
      CONFIG_STORAGE_TOPIC: docker_configs          
      OFFSET_STORAGE_TOPIC: docker_offsets           
      STATUS_STORAGE_TOPIC: docker_statuses         
      BOOTSTRAP_SERVERS: kafka:9092
      KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECTOR_CLIENT_CONFIG_OVERRIDES_POLICY: All              
    depends_on:
      - postgres
      - kafka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
